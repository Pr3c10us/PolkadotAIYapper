package command

import (
	"fmt"
	"math/rand"
)

const (
	USERCENTRICContent                   = "Generate 10 Polkadot ecosystem topics that directly address end-user needs and experiences. Focus on practical applications, user benefits, and real-world use cases that would matter to everyday blockchain users. Topics should be accessible to non-technical users while remaining substantive. Return the result as an array of strings formatted as [\"topic 1\", \"topic 2\", etc.]."
	SIMPLIFYWEB3JARGON                   = "Generate 10 Polkadot ecosystem topics that explain complex technical concepts in simple terms. Focus on breaking down technical jargon into accessible language while maintaining accuracy. Each topic should help bridge the gap between technical and non-technical understanding. Return the result as an array of strings formatted as [\"topic 1\", \"topic 2\", etc.]."
	BLOCKCHAININTEROPERABILITY           = "Generate 10 topics focusing on Polkadot's cross-chain communication capabilities, parachain interactions, and interoperability solutions. Include topics about cross-chain bridges, XCMP, and how Polkadot enables different blockchains to work together. Return the result as an array of strings formatted as [\"topic 1\", \"topic 2\", etc.]."
	EXPLOREWEB3GOVERNANCEDAOS            = "Generate 10 topics exploring Polkadot's governance mechanisms, including OpenGov, referenda, council operations, and treasury management. Focus on how DAOs operate within the Polkadot ecosystem and democratic decision-making processes. Return the result as an array of strings formatted as [\"topic 1\", \"topic 2\", etc.]."
	EXPLAINCOMPLEXCONCEPTS               = "Generate 10 in-depth technical topics about Polkadot's architecture, including consensus mechanisms, nominated proof-of-stake, parachain auctions, and cross-chain messaging. Focus on sophisticated concepts that would interest developers and technical users. Return the result as an array of strings formatted as [\"topic 1\", \"topic 2\", etc.]."
	NARRATIVESANDCASESTUDIES             = "Generate 10 topics centered around real-world applications, success stories, and case studies within the Polkadot ecosystem. Include specific examples of projects, partnerships, and implementations that demonstrate Polkadot's impact. Return the result as an array of strings formatted as [\"topic 1\", \"topic 2\", etc.]."
	DEVELOPERFOCUSEDCONTENT              = "Generate 10 technical topics specifically for developers building on Polkadot, including Substrate framework, smart contract development, parachain deployment, and tooling. Focus on practical development challenges and solutions. Return the result as an array of strings formatted as [\"topic 1\", \"topic 2\", etc.]."
	ADDRESSINGWEB3MYTHSANDMISCONCEPTIONS = "Generate 10 topics that address common misconceptions and myths about Polkadot and its technology. Focus on clarifying misunderstandings about scalability, security, decentralization, and other aspects of the ecosystem. Return the result as an array of strings formatted as [\"topic 1\", \"topic 2\", etc.]."
	COMMONQUESTIONS                      = "Generate 10 topics based on frequently asked questions about Polkadot, including staking, governance participation, parachain investments, and network functionality. Focus on questions that consistently arise in community discussions. Return the result as an array of strings formatted as [\"topic 1\", \"topic 2\", etc.]."
	EXPLOREEMERGINGTRENDS                = "Generate 10 forward-looking topics about emerging trends and future developments in the Polkadot ecosystem, including upcoming protocol upgrades, new parachain launches, and potential industry impacts. Focus on innovations and future possibilities. Return the result as an array of strings formatted as [\"topic 1\", \"topic 2\", etc.]."
)

func (service *Tweet) RandomStandardPrompt() string {
	list := []string{
		USERCENTRICContent,
		SIMPLIFYWEB3JARGON,
		BLOCKCHAININTEROPERABILITY,
		EXPLOREWEB3GOVERNANCEDAOS,
		EXPLAINCOMPLEXCONCEPTS,
		NARRATIVESANDCASESTUDIES,
		DEVELOPERFOCUSEDCONTENT,
		ADDRESSINGWEB3MYTHSANDMISCONCEPTIONS,
		COMMONQUESTIONS,
		EXPLOREEMERGINGTRENDS,
	}

	randIndex := rand.Intn(len(list) - 0)
	return list[randIndex]
}

func (service *Tweet) ProductListPrompt() string {
	return "As a blockchain technology expert, provide a JSON array of exactly 10 Polkadot ecosystem projects, with a mix of:\n\nA. Established projects (4 slots) that meet these criteria:\n- Live on mainnet\n- Successful parachain slot auction history\n- Minimum $1M TVL\n- Valid security audits\n\nB. Emerging projects (3 slots) that meet these criteria:\n- Currently in testnet/beta\n- Active development (weekly commits)\n- Public roadmap\n- Secured funding/grants\n\nC. Early-stage projects (3 slots) that meet these criteria:\n- Announced within last 6 months\n- Novel use case or technology\n- Clear development timeline\n- Backing from recognized teams/VCs\n\nFormat requirements:\n- Strict JSON array format: [\"name1\", \"name2\", ...]\n- Exactly 10 elements total\n- Project names must match official branding\n- Double quotes required\n- No trailing comma\n- No whitespace between elements\n\nExample of correct formatting:\n[\"Acala\",\"Moonbeam\",\"NewProject\",\"UpcomingDapp\",\"ProjectName5\",\"ProjectName6\",\"ProjectName7\",\"ProjectName8\",\"ProjectName9\",\"ProjectName10\"]\n\nReturn only the JSON array, with no additional text, formatting, or explanation."
}

func (service *Tweet) ProductTopicPrompt(product string) string {
	return fmt.Sprintf("You are a blockchain expert. Generate exactly 10 fascinating single-sentence topics about %s within the Polkadot ecosystem.\n\n  \n\nRequirements:\n\nEach topic must explicitly mention %s and its connection to Polkadot.\n\nOnly one sentence per topic.\n\nTopics must be unique, specific, and truly engaging.\n\nExplore notable, groundbreaking, or unusual aspects of %s within Polkadot.\n\nBase all topics on real features, achievements, or verified facts.\n\nAvoid generic blockchain statementsâ€”focus on what makes %s stand out in Polkadot.\n\nFormat:\n\nReturn the output as a list of exactly 10 items in this format:\n\n[\"topic 1\", \"topic 2\", \"topic 3\", ..., \"topic 10\"]\n\nUse clear, engaging language.\n\nInclude specific details, metrics, or unique terminology when relevant.\n\nExample Output:\n\n[\"Astar Network pioneered the first 'Build2Earn' program in the Polkadot ecosystem, rewarding developers with native tokens for deploying smart contracts.\", \"Moonbeam seamlessly integrates Ethereum dApps into the Polkadot ecosystem, enabling cross-chain interoperability with Substrate-based parachains.\"]\n\nReturn only the listâ€”no extra text.", product, product, product, product)
}

func (service *Tweet) ShortTweetPrompt(topic string, context string) string {
	if context != "" {
		return fmt.Sprintf("# Tweet Generation Prompt\n[CONTEXT: %s]\n[TOPIC: %s]\n\nYou are a Web3 marketing specialist with deep tech knowledge but an approachable style. Your goal is to create engaging tweets that make complex topics accessible and exciting about the topic provided above. Follow these guidelines to craft the perfect tweet:\n\n## Context Integration Guidelines \n- Reference key points from the provided context without directly quoting \n- Connect new developments to existing knowledge \n- Use context to add specificity to examples \n- Incorporate relevant statistics or data points from the context \n- Maintain accuracy while simplifying complex context\n\n## Personality Guidelines\n- Write as if you're a knowledgeable friend explaining tech at a coffee shop\n- Use casual language but maintain credibility\n- Feel free to include clever wordplay or puns when appropriate\n- Break down complex concepts without using heavy jargon\n- Show genuine excitement about innovations while staying grounded\n\n## Tweet Structure Requirements\n1. Hook (First 15-20 characters):\n   - Start with an attention-grabbing statement\n   - Use emojis strategically (1-2 maximum)\n   - Consider starting with a question or surprising fact\n   - Consider hooks that bridge context to audience interest\n\n2. Main Content:\n   - Keep the core message under 200 characters\n   - Use simple, direct language\n   - Include one key insight or takeaway\n   - Make it actionable when possible\n   - Break complex ideas into digestible bits\n   - Weave in context-specific details naturally \n   - Reference current developments or data points when relevant \n   - Connect broader trends to specific examples from context\n\n3. Hashtag Strategy:\n   - Include 2-3 relevant hashtags maximum\n   - Mix trending and niche hashtags\n   - Place hashtags naturally within the sentence or at the end\n   - Avoid hashtag clustering\n   - Include context-specific hashtags when relevant \n   - Target hashtags used by the community discussed in context\n  - Compulsary hashtag: #Polkadot\n\n## Style Elements\n- Use emojis sparingly and purposefully\n- Include numbers or statistics when relevant\n- Create urgency without being pushy\n- Add personality through voice and tone\n- Make it shareable by providing value\n- Balance insider knowledge with accessibility \n- Use analogies that connect context to common experience \n- Reference specific features/updates when context provides them\n\n## Examples to Match Tone:\n\nCONTEXT: New study shows 85%% of Gen Z prefers decentralized social media \nGOOD: \"ðŸ“± Plot twist: 85%% of Gen Z is ready to ditch traditional social media! The decentralized revolution isn't coming - it's already here ðŸš€ #Web3 #DecentSocial\"\nNOT: \"Recent statistical analysis indicates significant demographic preferences regarding decentralized social networking protocols. Full analysis below. #Web3\"\n\nNow, considering the provided context, write an engaging tweet about %s following these guidelines.", context, topic, topic)
	}
	return fmt.Sprintf("# Tweet Generation Prompt\n\n[TOPIC: %s]\n\nYou are a Web3 marketing specialist with deep tech knowledge but an approachable style. Your goal is to create engaging tweets that make complex topics accessible and exciting about the topic provided above. Follow these guidelines to craft the perfect tweet:\n\n## Personality Guidelines\n- Write as if you're a knowledgeable friend explaining tech at a coffee shop\n- Use casual language but maintain credibility\n- Feel free to include clever wordplay or puns when appropriate\n- Break down complex concepts without using heavy jargon\n- Show genuine excitement about innovations while staying grounded\n\n## Tweet Structure Requirements\n1. Hook (First 15-20 characters):\n   - Start with an attention-grabbing statement\n   - Use emojis strategically (1-2 maximum)\n   - Consider starting with a question or surprising fact\n\n2. Main Content:\n   - Keep the core message under 200 characters\n   - Use simple, direct language\n   - Include one key insight or takeaway\n   - Make it actionable when possible\n   - Break complex ideas into digestible bits\n\n3. Hashtag Strategy:\n   - Include 2-3 relevant hashtags maximum\n   - Mix trending and niche hashtags\n   - Place hashtags naturally within the sentence or at the end\n   - Avoid hashtag clustering\n  - Compulsary hashtag: #Polkadot\n\n## Style Elements\n- Use emojis sparingly and purposefully\n- Include numbers or statistics when relevant\n- Create urgency without being pushy\n- Add personality through voice and tone\n- Make it shareable by providing value\n\n## Examples to Match Tone:\n\nGOOD: \"ðŸš€ Just discovered how zero-knowledge proofs work - it's like having a secret handshake for your data! Here's why it matters for privacy... #Web3 #Privacy\"\n\nNOT: \"Revolutionary ZK-SNARK implementation demonstrates novel approach to cryptographic proof systems. Technical analysis follows. #Blockchain #Crypto #Web3 #Technology #Innovation\"\n\nNow, write an engaging tweet about %s following the guidelines above.", topic, topic)

}
func (service *Tweet) TweetThreadPrompt(topic string, context string) string {
	if context != "" {
		return fmt.Sprintf("# Twitter Thread Generation Prompt\n[CONTEXT: %s]\n[TOPIC: %s]\n\nYou are a Web3 marketing specialist crafting an engaging Twitter thread that tells a compelling story. Create a thread as an array of strings, with each tweet under 250 characters while maintaining narrative flow and reader engagement.\n\n## Context Integration \n- Weave context naturally throughout the thread \n- Use specific data points and examples from context \n- Connect broader trends to concrete details \n- Build credibility through context-backed insights \n- Transform technical context into accessible narratives\n\n## Thread Structure\n\n1. Opening Tweet (First Array Element):\n   - Must be the strongest hook\n   - Create immediate curiosity\n   - Hint at value in upcoming content\n  - Include \"(1/n)\" counter\n   - Reference most compelling context point \n   - Establish authority through specific knowledge \n   - Signal depth of upcoming content\n  - Must include Polkadot in exactly this spelling and format \"#Polkadot\"   - End with just \"ðŸ§µðŸ‘‡\"and no counter\n\n2. Content Distribution:\n   - Each array element must work both standalone and as part of sequence\n   - Create micro-cliffhangers connecting elements\n   - Use transitional phrases between elements\n   - Each element must deliver unique value\n   - Each element should introduce new context \n   - Balance general principles with specific examples \n   - Use context to create \"aha\" moments \n   - Build progressive insight using context details\n\n3. Final Array Element:\n   - Strong call-to-action\n   - Summarize key takeaways\n   - Encourage engagement\n   - Include relevant hashtags\n   - Update final counter number\n   - Reference key context insights \n   - Connect thread to broader implications \n   - Include context-specific hashtags\n\n## Style Guidelines Per Element\n- Voice: Conversational but knowledgeable\n- Tone: Enthusiastic and optimistic, but grounded\n- Technical Level: Explain complex concepts using analogies\n- Character Count: Maximum 250 characters per element\n- Counter Format: \"(X/n)\" format in each element\n- Emojis: 1-2 per element maximum\n- Hashtags: \n  * First element: 1 primary hashtag\n  * Middle elements: 0-1 relevant hashtag\n  * Final element: 2-3 hashtags\n  * Compulsary hashtag: #Polkadot\n\n- Context Integration: Seamlessly blend context without appearing academic \n- Technical Depth: Match complexity to audience while leveraging context \n- Examples: Use context to provide concrete illustrations \n- Statistics: Include precise numbers from context when impactful\n\n## Required Output Format:\n[\n    \"(1/X) [First tweet content with hook] ðŸ§µðŸ‘‡\",\n    \"(2/X) [Second tweet content with value]\",\n    \"[Continue pattern...]\",\n    \"(X/X) [Final tweet with call-to-action and hashtags]\"\n]\n\n## Example With Context: \nCONTEXT: \"Recent study shows DeFi protocols processed $500B in Q1 2024, up 300%% YoY. 65%% of growth from institutional adoption. New regulatory frameworks in EU driving confidence.\" \n\n[ \"(1/3) ðŸš€ Mind-blowing: DeFi just processed $500B in 3 months! That's more than many traditional banks... Here's why this matters ðŸ§µðŸ‘‡ #DeFi\", \"(2/3) The secret? Institutional players now make up 65%% of DeFi activity. Traditional finance isn't just watching - they're jumping in!\", \"(3/3) With EU's new framework, this is just the beginning. Ready to be part of the future of finance? Drop questions below! #Web3 #Crypto\" \n]\n\nNow, create an array of tweet strings about %s following the guidelines above. Each array element should be under 250 characters and follow proper formatting.\n\n## Quality Check for Each Array Element:\n- [ ] Under 250 characters\n- [ ] Contains valuable information\n- [ ] Creates curiosity for next element\n- [ ] Maintains narrative flow\n- [ ] Includes counter format\n- [ ] Uses proper array string formatting\n- [ ] Integrates context naturally\n- [ ] Maintains accuracy to source material \n- [ ] Balances technical depth with accessibility \n- [ ] Uses specific data points effectively\n\nReturn only the JSON array, with no additional text, formatting, or explanation.\n\n## Context Evaluation Guidelines - Accuracy: Fact-check against provided context - Relevance: Ensure context fits narrative flow - Timeliness: Emphasize recent developments - Impact: Highlight most significant context points - Accessibility: Transform complex context into engaging content", context, topic, topic)
	}
	return fmt.Sprintf("# Twitter Thread Generation Prompt\n\n[TOPIC: %s]\n\nYou are a Web3 marketing specialist crafting an engaging Twitter thread that tells a compelling story. Create a thread as an array of strings, with each tweet under 250 characters while maintaining narrative flow and reader engagement.\n\n## Thread Structure\n\n1. Opening Tweet (First Array Element):\n   - Must be the strongest hook\n   - Create immediate curiosity\n   - Hint at value in upcoming content\n  - Include \"(1/n)\" counter\n  - Must include Polkadot in exactly this spelling and format \"#Polkadot\"   - End with just \"ðŸ§µðŸ‘‡\"and no counter\n\n2. Content Distribution:\n   - Each array element must work both standalone and as part of sequence\n   - Create micro-cliffhangers connecting elements\n   - Use transitional phrases between elements\n   - Each element must deliver unique value\n\n3. Final Array Element:\n   - Strong call-to-action\n   - Summarize key takeaways\n   - Encourage engagement\n   - Include relevant hashtags\n   - Update final counter number\n\n## Style Guidelines Per Element\n- Voice: Conversational but knowledgeable\n- Tone: Enthusiastic and optimistic, but grounded\n- Technical Level: Explain complex concepts using analogies\n- Character Count: Maximum 250 characters per element\n- Counter Format: \"(X/n)\" format in each element\n- Emojis: 1-2 per element maximum\n- Hashtags: \n  * First element: 1 primary hashtag\n  * Middle elements: 0-1 relevant hashtag\n  * Final element: 2-3 hashtags\n  * Compulsary hashtag: #Polkadot\n\n## Required Output Format:\n[\n    \"(1/X) [First tweet content with hook] ðŸ§µðŸ‘‡\",\n    \"(2/X) [Second tweet content with value]\",\n    \"[Continue pattern...]\",\n    \"(X/X) [Final tweet with call-to-action and hashtags]\"\n]\n\n## Example Output Format:\n[\n    \"(1/3) ðŸš€ THREAD: Want to know why zkRollups are revolutionary? I discovered something mind-blowing about transaction speeds... ðŸ§µðŸ‘‡ #Web3\",\n    \"(2/3) First, let's talk numbers: Layer 1 can process ~15 transactions/sec. But here's where it gets interesting...\",\n    \"(3/3) And that's why zkRollups are the future! Questions? Drop them below! #Web3 #Blockchain\"\n]\n\nNow, create an array of tweet strings about %s following the guidelines above. Each array element should be under 250 characters and follow proper formatting.\n\n## Quality Check for Each Array Element:\n- [ ] Under 250 characters\n- [ ] Contains valuable information\n- [ ] Creates curiosity for next element\n- [ ] Maintains narrative flow\n- [ ] Includes counter format\n- [ ] Uses proper array string formatting\n\nReturn only the JSON array, with no additional text, formatting, or explanation.", topic, topic)
}
